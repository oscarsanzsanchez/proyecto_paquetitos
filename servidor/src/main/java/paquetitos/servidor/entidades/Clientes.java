package paquetitos.servidor.entidades;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.json.bind.annotation.JsonbTransient;
import javax.json.bind.annotation.JsonbTypeAdapter;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

/**
 * Clientes generated by hbm2java
 */
@XmlRootElement(name = "cliente")
@Entity
@Table(name = "clientes", catalog = "paquetitos")
public class Clientes implements java.io.Serializable {

    private Integer idCliente;
    private String nombreCliente;
    private String cifnif;
    private String direccionFacturacion;
    private Set<Envios> envioses = new HashSet<Envios>(0);
    private Set<Destinatarios> destinatarioses = new HashSet<Destinatarios>(0);

    public Clientes() {
    }

    /**
     * Constructor para crear un cliente con 3 parametros.
     *
     * @param nombreCliente nombre del cliente
     * @param cifnif numero identificativo
     * @param direccionFacturacion direcci贸n de facturaci贸n
     */
    public Clientes(String nombreCliente, String cifnif, String direccionFacturacion) {
        this.nombreCliente = nombreCliente;
        this.cifnif = cifnif;
        this.direccionFacturacion = direccionFacturacion;
    }

    /**
     * Constructor para crear un cliente con 5 parametros.
     *
     * @param nombreCliente nombre del cliente
     * @param cifnif numero identificativo
     * @param direccionFacturacion direcci贸n de facturaci贸n
     * @param envioses envios asociados
     * @param destinatarioses direcciones de entrega asociados
     */
    public Clientes(String nombreCliente, String cifnif, String direccionFacturacion, Set<Envios> envioses,
            Set<Destinatarios> destinatarioses) {
        this.nombreCliente = nombreCliente;
        this.cifnif = cifnif;
        this.direccionFacturacion = direccionFacturacion;
        this.envioses = envioses;
        this.destinatarioses = destinatarioses;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "IdCliente", unique = true, nullable = false)
    public Integer getIdCliente() {
        return this.idCliente;
    }

    public void setIdCliente(Integer idCliente) {
        this.idCliente = idCliente;
    }

    @Column(name = "NombreCliente", nullable = false, length = 60)
    public String getNombreCliente() {
        return this.nombreCliente;
    }

    public void setNombreCliente(String nombreCliente) {
        this.nombreCliente = nombreCliente;
    }

    @Column(name = "CIFNIF", nullable = false, length = 9)
    public String getCifnif() {
        return this.cifnif;
    }

    public void setCifnif(String cifnif) {
        this.cifnif = cifnif;
    }

    @Column(name = "DireccionFacturacion", nullable = false, length = 250)
    public String getDireccionFacturacion() {
        return this.direccionFacturacion;
    }

    public void setDireccionFacturacion(String direccionFacturacion) {
        this.direccionFacturacion = direccionFacturacion;
    }

    @XmlTransient
    @JsonbTransient
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "clientes")
    public Set<Envios> getEnvioses() {
        return this.envioses;
    }

    public void setEnvioses(Set<Envios> envioses) {
        this.envioses = envioses;
    }

    @XmlTransient
    @JsonbTransient
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "clientes")
    public Set<Destinatarios> getDestinatarioses() {
        return this.destinatarioses;
    }

    public void setDestinatarioses(Set<Destinatarios> destinatarioses) {
        this.destinatarioses = destinatarioses;
    }

    /* ===================================================== */
    /**
     * Este metodo nos servira para recoger un cliente por ID en la base de
     * datos
     *
     * @param id id por el cual recogeremos al cliente
     * @return cliente con ese id.
     */
    public Clientes getClienteById(Integer id) {

        SessionFactory sesFactory = HibernateUtil.getSessionFactory();
        Session session = sesFactory.openSession();
        List<Clientes> listaClientes = null;
        Clientes cliente = null;

        try {
            Query query = session.createQuery("FROM Clientes where idCliente = :id");
            query.setParameter("id", id);
            listaClientes = query.list();
            cliente = listaClientes.get(0);

        } catch (HibernateException e) {

        } finally {
            session.close();
        }

        return cliente;
    }

}
